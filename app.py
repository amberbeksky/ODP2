import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
import traceback
from tkcalendar import DateEntry
from datetime import datetime, timedelta
import gspread
from google.oauth2.service_account import Credentials
import os
import json
import sys
import updater
from docx import Document
from docx.shared import Pt, Cm
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from tkinter import simpledialog
import time

# ================== –ü—É—Ç–∏ ==================
APP_DIR = os.path.join(os.getenv("APPDATA") or os.path.expanduser("~"), "MyApp")
os.makedirs(APP_DIR, exist_ok=True)

DB_NAME = os.path.join(APP_DIR, "clients.db")
SHEET_ID = "1_DfTT8yzCjP0VH0PZu1Fz6FYMm1eRr7c0TmZU2DrH_w"

# ================== –ò–ú–ü–û–†–¢ –ú–ï–ù–ï–î–ñ–ï–†–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ==================
try:
    from auth_manager import AuthManager
    AUTH_AVAILABLE = True
except ImportError:
    AUTH_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å auth_manager –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

# ================== –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ ==================
class SettingsManager:
    def __init__(self):
        self.settings_file = os.path.join(APP_DIR, "settings.json")
        self.settings = self.load_settings()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_settings = {
            'default_export_path': os.path.join(os.path.expanduser("~"), "Desktop"),
            'auto_check_updates': True,
            'show_notifications': True,
            'theme': 'modern'
        }
        
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    loaded_settings = json.load(f)
                    default_settings.update(loaded_settings)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        return default_settings
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def get(self, key, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return self.settings.get(key, default)
    
    def set(self, key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings[key] = value
        self.save_settings()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_manager = SettingsManager()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_manager = None

# ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================
def create_tooltip(widget, text):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞"""
    def on_enter(event):
        tooltip = tk.Toplevel()
        tooltip.wm_overrideredirect(True)
        tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
        
        label = tk.Label(tooltip, text=text, background="#ffffe0", 
                        relief='solid', borderwidth=1, font=ModernStyle.FONTS['small'])
        label.pack()
        
        widget.tooltip = tooltip
    
    def on_leave(event):
        if hasattr(widget, 'tooltip') and widget.tooltip:
            widget.tooltip.destroy()
            widget.tooltip = None
    
    widget.bind("<Enter>", on_enter)
    widget.bind("<Leave>", on_leave)

def show_notifications():
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–µ–Ω—é)"""
    notification_system.show_notification_window()

def show_statistics():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
    clients = get_all_clients(limit=10000)
    total = len(clients)
    
    today = datetime.today().date()
    active = 0
    expired = 0
    soon = 0
    groups = {}
    
    for client in clients:
        ippcu_end = client[8]
        group = client[9] or "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
        
        if group not in groups:
            groups[group] = 0
        groups[group] += 1
        
        if ippcu_end:
            try:
                end_date = datetime.strptime(ippcu_end, "%Y-%m-%d").date()
                if end_date < today:
                    expired += 1
                elif end_date <= today + timedelta(days=30):
                    soon += 1
                else:
                    active += 1
            except:
                pass
    
    stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê

–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total}
‚îú‚îÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –ò–ü–ü–°–£: {active}
‚îú‚îÄ –ò—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π: {soon}
‚îî‚îÄ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ò–ü–ü–°–£: {expired}

üìÇ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ì–†–£–ü–ü–ê–ú:"""
    
    for group, count in sorted(groups.items()):
        percentage = (count / total) * 100 if total > 0 else 0
        stats_text += f"\n‚îú‚îÄ {group}: {count} —á–µ–ª. ({percentage:.1f}%)"
    
    messagebox.showinfo("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats_text)

def check_expiring_ippcu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ò–ü–ü–°–£ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    clients = get_all_clients(limit=10000)
    today = datetime.today().date()
    
    expiring = []
    expired = []
    
    for client in clients:
        ippcu_end = client[8]
        if ippcu_end:
            try:
                end_date = datetime.strptime(ippcu_end, "%Y-%m-%d").date()
                days_left = (end_date - today).days
                
                if 0 <= days_left <= 7:
                    expiring.append((client, days_left))
                elif days_left < 0:
                    expired.append((client, abs(days_left)))
            except:
                pass
    
    messages = []
    
    if expired:
        messages.append(f"‚ùå –ü–†–û–°–†–û–ß–ï–ù–´ {len(expired)} –ò–ü–ü–°–£!")
        for client, days in expired[:3]:
            messages.append(f"   {client[1]} {client[2]} - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {days} –¥–Ω. –Ω–∞–∑–∞–¥")
    
    if expiring:
        messages.append(f"‚ö†Ô∏è –ò–°–¢–ï–ö–ê–Æ–¢ {len(expiring)} –ò–ü–ü–°–£ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏!")
        for client, days in expiring[:3]:
            messages.append(f"   {client[1]} {client[2]} - –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω.")
    
    if messages:
        messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ!", "\n".join(messages))

def export_selected_to_word():
    selected_items = []
    for row_id in tree.get_children():
        values = tree.item(row_id, "values")
        if values and values[0] == "X":
            selected_items.append(values)

    if not selected_items:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–∞–º–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        return

    shift_name = simpledialog.askstring("–°–º–µ–Ω–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 11 —Å–º–µ–Ω–∞)")
    if not shift_name:
        return

    date_range = simpledialog.askstring("–î–∞—Ç—ã", "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å 01.10.2024 –ø–æ 15.10.2024)")
    if not date_range:
        return

    doc = Document()

    heading = doc.add_paragraph(f"{shift_name} {date_range}")
    heading.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    run = heading.runs[0]
    run.bold = True
    run.font.size = Pt(14)

    doc.add_paragraph("")

    for i, values in enumerate(selected_items, start=1):
        last = values[2]
        first = values[3]
        middle = values[4]
        dob = values[5]

        fio = " ".join(v for v in [last, first, middle] if v)
        p = doc.add_paragraph(f"{i}. {fio} ‚Äì {dob} –≥.—Ä.")
        p.runs[0].font.size = Pt(12)

    spacer = doc.add_paragraph("\n")
    spacer.paragraph_format.space_after = Pt(300)

    total = len(selected_items)
    total_p = doc.add_paragraph(f"–ò—Ç–æ–≥–æ: {total} —á–µ–ª–æ–≤–µ–∫")
    total_p.runs[0].bold = True
    total_p.runs[0].font.size = Pt(12)

    podpis = doc.add_paragraph()
    podpis.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

    run_role = podpis.add_run("–ó–∞–≤–µ–¥—É—é—â–∞—è –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è ")
    run_role.font.size = Pt(12)

    run_line = podpis.add_run("__________________ ")
    run_line.font.size = Pt(12)

    run_name = podpis.add_run("–î—É—Ä–∞–Ω–¥–∏–Ω–∞ –ê.–í.")
    run_name.font.size = Pt(12)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    export_path = settings_manager.get('default_export_path', os.path.join(os.path.expanduser("~"), "Desktop"))
    
    safe_shift = shift_name.replace(" ", "_")
    safe_date = date_range.replace(" ", "_").replace(":", "-").replace(".", "-")
    file_name = f"{safe_shift}_{safe_date}.docx"
    file_path = os.path.join(export_path, file_name)

    try:
        doc.save(file_path)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{file_path}")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    for row_id in tree.get_children():
        values = list(tree.item(row_id, "values"))
        if values[0] == "X":
            values[0] = " "
            tree.item(row_id, values=values)
    
    if hasattr(root, 'update_word_count'):
        root.update_word_count()

def show_status_message(message, duration=3000):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
    if hasattr(root, 'status_label'):
        root.status_label.config(text=message)
        root.after(duration, lambda: root.status_label.config(text="–ì–æ—Ç–æ–≤–æ"))

def copy_to_clipboard(text):
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
    if text:
        root.clipboard_clear()
        root.clipboard_append(text)
        show_status_message(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {text[:20]}..." if len(text) > 20 else f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {text}")

def add_to_word_list(item):
    """–î–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è Word"""
    values = list(tree.item(item, "values"))
    values[0] = "X" if values[0].strip() == "" else " "
    tree.item(item, values=values)
    
    action = "–¥–æ–±–∞–≤–ª–µ–Ω –≤" if values[0] == "X" else "—É–¥–∞–ª–µ–Ω –∏–∑"
    show_status_message(f"–ö–ª–∏–µ–Ω—Ç {action} —Å–ø–∏—Å–∫–∞ –¥–ª—è Word")

def quick_view(client_id):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute(
            "SELECT last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group_name FROM clients WHERE id=?",
            (client_id,)
        )
        client = cur.fetchone()
    
    if not client:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    last, first, middle, dob, phone, contract, ippcu_start, ippcu_end, group = client
    
    info_text = f"""üë§ {last} {first} {middle or ''}

üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÑ –î–æ–≥–æ–≤–æ—Ä: {contract or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üè∑Ô∏è –ì—Ä—É–ø–ø–∞: {group or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

üìã –ò–ü–ü–°–£:
   –ù–∞—á–∞–ª–æ: {ippcu_start or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {ippcu_end or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"""
    
    if ippcu_end:
        try:
            end_date = datetime.strptime(ippcu_end, "%Y-%m-%d").date()
            today = datetime.today().date()
            days_left = (end_date - today).days
            
            if days_left < 0:
                info_text += f"\n\n‚ö†Ô∏è –ò–ü–ü–°–£ –ü–†–û–°–†–û–ß–ï–ù –Ω–∞ {abs(days_left)} –¥–Ω."
            elif days_left <= 30:
                info_text += f"\n\n‚ö†Ô∏è –ò–ü–ü–°–£ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
            else:
                info_text += f"\n\n‚úÖ –ò–ü–ü–°–£ –∞–∫—Ç–∏–≤–µ–Ω ({days_left} –¥–Ω. –æ—Å—Ç–∞–ª–æ—Å—å)"
        except:
            pass
    
    messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ", info_text)

# ================== –§–£–ù–ö–¶–ò–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ==================
def check_auth_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if not AUTH_AVAILABLE:
        return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    
    if auth_manager and hasattr(auth_manager, 'current_user') and auth_manager.current_user:
        return True
    return False

def require_auth(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    def wrapper(*args, **kwargs):
        if not check_auth_status():
            show_login_window()
            return None
        return func(*args, **kwargs)
    return wrapper

def show_login_window():
    """–û–∫–Ω–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    login_window = tk.Toplevel(root)
    login_window.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è")
    login_window.geometry("450x450")
    login_window.configure(bg=ModernStyle.COLORS['background'])
    login_window.resizable(False, False)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    login_window.transient(root)
    login_window.grab_set()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = tk.Frame(login_window, bg=ModernStyle.COLORS['primary'], height=80)
    header.pack(fill='x', padx=0, pady=0)
    
    tk.Label(header, text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", 
            bg=ModernStyle.COLORS['primary'],
            fg='white',
            font=ModernStyle.FONTS['h1']).pack(pady=20)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    content_frame = tk.Frame(login_window, bg=ModernStyle.COLORS['background'], padx=30, pady=30)
    content_frame.pack(fill='both', expand=True)
    
    # –ü–æ–ª—è –≤–≤–æ–¥–∞
    fields_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['background'])
    fields_frame.pack(fill='both', expand=True, pady=20)
    
    # –õ–æ–≥–∏–Ω
    login_frame = tk.Frame(fields_frame, bg=ModernStyle.COLORS['background'])
    login_frame.pack(fill='x', pady=10)
    
    tk.Label(login_frame, text="–õ–æ–≥–∏–Ω:",
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text_primary'],
            font=ModernStyle.FONTS['body']).pack(anchor='w')
    
    login_var = tk.StringVar()
    login_entry = tk.Entry(login_frame, textvariable=login_var,
                          font=ModernStyle.FONTS['body'], width=30)
    login_entry.pack(fill='x', pady=5)
    
    # –ü–∞—Ä–æ–ª—å
    password_frame = tk.Frame(fields_frame, bg=ModernStyle.COLORS['background'])
    password_frame.pack(fill='x', pady=10)
    
    tk.Label(password_frame, text="–ü–∞—Ä–æ–ª—å:",
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text_primary'],
            font=ModernStyle.FONTS['body']).pack(anchor='w')
    
    password_var = tk.StringVar()
    password_entry = tk.Entry(password_frame, textvariable=password_var,
                             show="‚Ä¢", font=ModernStyle.FONTS['body'], width=30)
    password_entry.pack(fill='x', pady=5)
    
    # –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
    remember_var = tk.BooleanVar(value=True)
    remember_frame = tk.Frame(fields_frame, bg=ModernStyle.COLORS['background'])
    remember_frame.pack(fill='x', pady=10)
    
    remember_cb = tk.Checkbutton(remember_frame, 
                                text="–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è –Ω–∞ 30 –¥–Ω–µ–π",
                                variable=remember_var,
                                bg=ModernStyle.COLORS['background'],
                                fg=ModernStyle.COLORS['text_primary'],
                                font=ModernStyle.FONTS['small'],
                                selectcolor=ModernStyle.COLORS['primary'])
    remember_cb.pack(anchor='w')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    info_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['surface'],
                         relief='solid', bd=1, padx=15, pady=10)
    info_frame.pack(fill='x', pady=10)
    
    info_text = """–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ admin / admin - –ó–µ–ª–µ–Ω–∫–æ–≤ –î.–í. (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
‚Ä¢ –î–£–†–ê–ù–î–ò–ù–ê / 12345 - –î—É—Ä–∞–Ω–¥–∏–Ω–∞ –ê.–í. (–ó–∞–≤–µ–¥—É—é—â–∞—è)
‚Ä¢ –õ–ê–í–†–û–í–ê / 12345 - –õ–∞–≤—Ä–æ–≤–∞ –ê.–ê. (–°–æ—Ç—Ä—É–¥–Ω–∏–∫)"""
    
    tk.Label(info_frame, text=info_text,
            bg=ModernStyle.COLORS['surface'],
            fg=ModernStyle.COLORS['text_secondary'],
            font=ModernStyle.FONTS['small'],
            justify='left').pack(anchor='w')
    
    # –ö–Ω–æ–ø–∫–∏
    button_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['background'])
    button_frame.pack(fill='x', pady=10)
    
    def attempt_login():
        username = login_var.get().strip()
        password = password_var.get()
        
        print(f"DEBUG: Attempting login for {username}")  # –î–ï–ë–ê–ì
        
        if not username or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        try:
            success, message = auth_manager.login(username, password, remember_var.get())
            
            if success:
                print("DEBUG: Login successful!")  # –î–ï–ë–ê–ì
                login_window.destroy()
                # –û—á–∏—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–Ω–æ–≤–æ
                for widget in root.winfo_children():
                    widget.destroy()
                initialize_main_application()
                show_status_message(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {auth_manager.get_user_display_name()}!")
            else:
                print(f"DEBUG: Login failed: {message}")  # –î–ï–ë–ê–ì
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
                if "locked" in message.lower():
                    retry = messagebox.askretrycancel(
                        "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
                        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É?"
                    )
                    if retry:
                        root.after(1000, attempt_login)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", message)
                password_var.set("")
                password_entry.focus()
        except sqlite3.OperationalError as e:
            if "locked" in str(e):
                retry = messagebox.askretrycancel(
                    "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", 
                    "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                if retry:
                    root.after(1000, attempt_login)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        except Exception as e:
            print(f"DEBUG: Login exception: {e}")  # –î–ï–ë–ê–ì
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
    
    # –ö–Ω–æ–ø–∫–∞ –í–æ–π—Ç–∏
    login_btn = ttk.Button(button_frame, text="–í–æ–π—Ç–∏", 
                          style='Primary.TButton',
                          command=attempt_login)
    login_btn.pack(fill='x', pady=5)
    
    # –ö–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞
    def cancel_login():
        login_window.destroy()
        if not check_auth_status():
            root.destroy()
    
    cancel_btn = ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", 
                           style='Secondary.TButton',
                           command=cancel_login)
    cancel_btn.pack(fill='x', pady=5)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
    def on_enter_pressed(event):
        attempt_login()
    
    login_entry.bind('<Return>', on_enter_pressed)
    password_entry.bind('<Return>', on_enter_pressed)
    
    # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞
    login_entry.focus()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if auth_manager and hasattr(auth_manager, 'current_user') and auth_manager.current_user:
        login_window.destroy()
        initialize_main_application()

def show_user_profile():
    """–û–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not auth_manager or not auth_manager.current_user:
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
        return
    
    profile_window = tk.Toplevel(root)
    profile_window.title("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    profile_window.geometry("450x350")
    profile_window.configure(bg=ModernStyle.COLORS['background'])
    profile_window.resizable(False, False)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = tk.Frame(profile_window, bg=ModernStyle.COLORS['primary'], height=60)
    header.pack(fill='x', padx=0, pady=0)
    
    tk.Label(header, text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", 
            bg=ModernStyle.COLORS['primary'],
            fg='white',
            font=ModernStyle.FONTS['h2']).pack(pady=15)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    content_frame = tk.Frame(profile_window, bg=ModernStyle.COLORS['background'], padx=20, pady=20)
    content_frame.pack(fill='both', expand=True)
    
    user_info = auth_manager.current_user
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    info_text = f"""–§–ò–û: {user_info['full_name']}
–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_info['role']}
–õ–æ–≥–∏–Ω: {user_info['username']}
–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {', '.join(user_info['permissions'])}
–°—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞: {"–ó–∞–ø–æ–º–Ω–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π" if auth_manager.remember_me else "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"}"""
    
    tk.Label(content_frame, text=info_text,
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text_primary'],
            font=ModernStyle.FONTS['body'],
            justify='left').pack(anchor='w', pady=10)
    
    # –ö–Ω–æ–ø–∫–∏
    button_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['background'])
    button_frame.pack(fill='x', pady=20)
    
    def logout():
        if messagebox.askyesno("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
            auth_manager.logout()
            profile_window.destroy()
            show_login_window()
            update_ui_for_user()
    
    def clear_remember():
        if messagebox.askyesno("–û—á–∏—Å—Ç–∫–∞", "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π –≤—Ö–æ–¥?\n–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è."):
            auth_manager.clear_remember_token()
            auth_manager.remember_me = False
            profile_window.destroy()
            show_status_message("–ó–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π –≤—Ö–æ–¥ –æ—á–∏—â–µ–Ω")
    
    ttk.Button(button_frame, text="–°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
              style='Primary.TButton',
              command=logout).pack(side='right', padx=(10, 0))
    
    ttk.Button(button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã–π –≤—Ö–æ–¥", 
              style='Secondary.TButton',
              command=clear_remember).pack(side='right', padx=(10, 0))
    
    ttk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
              style='Secondary.TButton',
              command=profile_window.destroy).pack(side='right')

def update_ui_for_user():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not auth_manager or not auth_manager.current_user:
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
    root.title(f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è - {auth_manager.get_user_display_name()}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    if hasattr(root, 'user_status_label'):
        root.user_status_label.config(
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {auth_manager.get_user_display_name()}"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    update_permissions_ui()

def update_permissions_ui():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞"""
    if not auth_manager or not auth_manager.current_user:
        return
    
    # –ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
    if hasattr(root, 'add_btn'):
        root.add_btn['state'] = 'normal' if auth_manager.has_permission('edit') else 'disabled'
    
    if hasattr(root, 'delete_btn'):
        root.delete_btn['state'] = 'normal' if auth_manager.has_permission('delete') else 'disabled'

def setup_auth_system():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    global auth_manager
    
    if not AUTH_AVAILABLE:
        print("‚ö†Ô∏è –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –º–æ–¥—É–ª—å auth_manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        class AuthStub:
            def __init__(self):
                self.current_user = {
                    'full_name': '–î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'role': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                    'username': 'demo',
                    'permissions': ['basic']
                }
                self.remember_me = False
            
            def get_user_display_name(self):
                return "–î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            def has_permission(self, permission):
                return True
            
            def logout(self):
                pass
        
        auth_manager = AuthStub()
        return
    
    try:
        auth_manager = AuthManager(DB_NAME)
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        auth_manager.cleanup_expired_tokens()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

# ================== –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ==================
class NotificationSystem:
    def __init__(self, db_path):
        self.db_path = db_path
        self.notifications = []
        self.is_initialized = False
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.cursor()
                cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='clients'")
                if not cur.fetchone():
                    print("–¢–∞–±–ª–∏—Ü–∞ clients –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                    return False
                    
            self.setup_daily_checks()
            self.is_initialized = True
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    def setup_daily_checks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        self.check_birthdays()
        self.check_ippcu_expiry()
        self.check_empty_contracts()
        self.check_upcoming_reviews()
    
    def check_birthdays(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π"""
        try:
            today = datetime.today().date()
            next_week = today + timedelta(days=30)
            
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT last_name, first_name, middle_name, dob 
                    FROM clients 
                    WHERE dob IS NOT NULL AND dob != ''
                """)
                
                clients = cur.fetchall()
            
            for last, first, middle, dob in clients:
                try:
                    if not dob:
                        continue
                        
                    bday = datetime.strptime(dob, "%Y-%m-%d").date()
                    bday_this_year = bday.replace(year=today.year)
                    
                    # –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
                    if bday_this_year < today:
                        bday_this_year = bday.replace(year=today.year + 1)
                    
                    days_until = (bday_this_year - today).days
                    
                    if 0 <= days_until <= 30:
                        level = "warning" if days_until <= 7 else "info"
                        self.add_notification(
                            "birthday", 
                            f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {last} {first} {middle or ''} —á–µ—Ä–µ–∑ {days_until} –¥–Ω. ({bday.strftime('%d.%m.%Y')})",
                            level
                        )
                except ValueError:
                    continue
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π: {e}")
    
    def check_ippcu_expiry(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ò–ü–ü–°–£"""
        try:
            today = datetime.today().date()
            
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT last_name, first_name, ippcu_end 
                    FROM clients 
                    WHERE ippcu_end IS NOT NULL AND ippcu_end != ''
                """)
                
                clients = cur.fetchall()
            
            for last, first, ippcu_end in clients:
                try:
                    if not ippcu_end:
                        continue
                        
                    end_date = datetime.strptime(ippcu_end, "%Y-%m-%d").date()
                    days_left = (end_date - today).days
                    
                    if days_left == 0:
                        self.add_notification(
                            "ippcu_urgent",
                            f"üö® –°–†–û–ß–ù–û: –ò–ü–ü–°–£ {last} {first} –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!",
                            "error"
                        )
                    elif 0 < days_left <= 7:
                        self.add_notification(
                            "ippcu_warning",
                            f"‚ö†Ô∏è –ò–ü–ü–°–£ {last} {first} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.",
                            "warning"
                        )
                    elif 7 < days_left <= 30:
                        self.add_notification(
                            "ippcu_info",
                            f"‚ÑπÔ∏è –ò–ü–ü–°–£ {last} {first} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.",
                            "info"
                        )
                    elif days_left < 0:
                        self.add_notification(
                            "ippcu_expired",
                            f"‚ùå –ü–†–û–°–†–û–ß–ï–ù–û: –ò–ü–ü–°–£ {last} {first} ({abs(days_left)} –¥–Ω. –Ω–∞–∑–∞–¥)",
                            "error"
                        )
                except ValueError:
                    continue
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ü–ü–°–£: {e}")
    
    def check_empty_contracts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT last_name, first_name 
                    FROM clients 
                    WHERE contract_number IS NULL OR contract_number = '' OR contract_number = '–Ω–µ —É–∫–∞–∑–∞–Ω'
                """)
                
                empty_contracts = cur.fetchall()
            
            if empty_contracts:
                client_list = ", ".join([f"{last} {first}" for last, first in empty_contracts[:3]])
                if len(empty_contracts) > 3:
                    client_list += f" –∏ –µ—â—ë {len(empty_contracts) - 3}"
                
                self.add_notification(
                    "empty_contracts",
                    f"üìÑ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —É {len(empty_contracts)} –∫–ª–∏–µ–Ω—Ç–æ–≤: {client_list}",
                    "warning"
                )
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {e}")
    
    def check_upcoming_reviews(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–æ–≤ –ò–ü–ü–°–£"""
        try:
            today = datetime.today().date()
            next_month = today + timedelta(days=30)
            
            with sqlite3.connect(self.db_path) as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT last_name, first_name, ippcu_start 
                    FROM clients 
                    WHERE ippcu_start IS NOT NULL AND ippcu_start != ''
                """)
                
                clients = cur.fetchall()
            
            for last, first, ippcu_start in clients:
                try:
                    if not ippcu_start:
                        continue
                        
                    start_date = datetime.strptime(ippcu_start, "%Y-%m-%d").date()
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –Ω—É–∂–µ–Ω —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤
                    review_date = start_date + timedelta(days=180)
                    days_until_review = (review_date - today).days
                    
                    if 0 <= days_until_review <= 30:
                        level = "warning" if days_until_review <= 7 else "info"
                        self.add_notification(
                            "review",
                            f"üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ò–ü–ü–°–£ –¥–ª—è {last} {first} —á–µ—Ä–µ–∑ {days_until_review} –¥–Ω.",
                            level
                        )
                except ValueError:
                    continue
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–æ–≤: {e}")
    
    def add_notification(self, category, message, level="info"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        recent_duplicate = any(
            n['category'] == category and 
            n['message'] == message and 
            n['timestamp'] > yesterday and
            not n['read']
            for n in self.notifications
        )
        
        if not recent_duplicate:
            self.notifications.append({
                "id": len(self.notifications) + 1,
                "timestamp": datetime.now(),
                "category": category,
                "message": message,
                "level": level,
                "read": False
            })
    
    def get_unread_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return sum(1 for n in self.notifications if not n['read'])
    
    def get_notifications_by_priority(self, unread_only=False):
        """–ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        priority_order = {"error": 0, "warning": 1, "info": 2}
        
        notifications = self.notifications
        if unread_only:
            notifications = [n for n in notifications if not n['read']]
            
        return sorted(notifications, 
                     key=lambda x: (priority_order.get(x['level'], 3), x['timestamp']), 
                     reverse=True)
    
    def mark_as_read(self, notification_id):
        """–ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        for notification in self.notifications:
            if notification['id'] == notification_id:
                notification['read'] = True
                break
    
    def mark_all_read(self):
        """–ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        for notification in self.notifications:
            notification['read'] = True
    
    def clear_old_notifications(self, days=7):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        cutoff_date = datetime.now() - timedelta(days=days)
        self.notifications = [
            n for n in self.notifications 
            if n['timestamp'] > cutoff_date or not n['read']
        ]
    
    def show_notification_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.is_initialized:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
            
        NotificationWindow(self)

class NotificationWindow:
    def __init__(self, notification_system):
        self.notification_system = notification_system
        self.create_window()
    
    def create_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.window = tk.Toplevel(root)
        self.window.title("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.window.geometry("600x500")
        self.window.configure(bg=ModernStyle.COLORS['background'])
        self.window.minsize(500, 400)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        header = tk.Frame(self.window, bg=ModernStyle.COLORS['primary'], height=60)
        header.pack(fill='x', padx=0, pady=0)
        header.pack_propagate(False)
        
        unread_count = self.notification_system.get_unread_count()
        title_text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unread_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö)"
        
        tk.Label(header, text=title_text, 
                bg=ModernStyle.COLORS['primary'],
                fg='white',
                font=ModernStyle.FONTS['h2']).pack(pady=15)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_frame = tk.Frame(self.window, bg=ModernStyle.COLORS['background'])
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        list_frame = tk.Frame(main_frame, bg=ModernStyle.COLORS['background'])
        list_frame.pack(fill='both', expand=True)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(list_frame)
        scrollbar.pack(side='right', fill='y')
        
        self.notification_canvas = tk.Canvas(
            list_frame, 
            bg=ModernStyle.COLORS['surface'],
            yscrollcommand=scrollbar.set,
            highlightthickness=0
        )
        self.notification_canvas.pack(side='left', fill='both', expand=True)
        scrollbar.config(command=self.notification_canvas.yview)
        
        # –§—Ä–µ–π–º –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ canvas
        self.notifications_frame = tk.Frame(self.notification_canvas, bg=ModernStyle.COLORS['surface'])
        self.canvas_window = self.notification_canvas.create_window(
            (0, 0), window=self.notifications_frame, anchor='nw', width=self.notification_canvas.winfo_reqwidth()
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(main_frame, bg=ModernStyle.COLORS['background'])
        button_frame.pack(fill='x', pady=(10, 0))
        
        ttk.Button(button_frame, text="üìÅ –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", 
                  style='Primary.TButton',
                  command=self.mark_all_read).pack(side='left', padx=(0, 10))
        
        ttk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", 
                  style='Secondary.TButton',
                  command=self.clear_old).pack(side='left', padx=(0, 10))
        
        ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  style='Secondary.TButton',
                  command=self.refresh).pack(side='left')
        
        ttk.Button(button_frame, text="‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", 
                  style='Secondary.TButton',
                  command=self.window.destroy).pack(side='right')
        
        # –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.notifications_frame.bind('<Configure>', self.on_frame_configure)
        self.notification_canvas.bind('<Configure>', self.on_canvas_configure)
        
        self.refresh()
    
    def on_frame_configure(self, event):
        """–û–±–Ω–æ–≤–∏—Ç—å scrollregion –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ—Ä–µ–π–º–∞"""
        self.notification_canvas.configure(scrollregion=self.notification_canvas.bbox("all"))
    
    def on_canvas_configure(self, event):
        """–û–±–Ω–æ–≤–∏—Ç—å —à–∏—Ä–∏–Ω—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ canvas"""
        self.notification_canvas.itemconfig(self.canvas_window, width=event.width)
    
    def create_notification_widget(self, parent, notification):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        frame = tk.Frame(parent, bg=ModernStyle.COLORS['surface'], relief='solid', bd=1, padx=10, pady=8)
        frame.pack(fill='x', pady=2)
        
        # –ò–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏ —Å—Ç–∞—Ç—É—Å–∞
        level_icons = {
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        }
        
        status_icon = '‚úÖ' if notification['read'] else 'üîî'
        level_icon = level_icons.get(notification['level'], 'üìå')
        
        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –∏–∫–æ–Ω–∫–∏ –∏ –≤—Ä–µ–º—è
        top_frame = tk.Frame(frame, bg=ModernStyle.COLORS['surface'])
        top_frame.pack(fill='x')
        
        tk.Label(top_frame, text=f"{status_icon} {level_icon}", 
                bg=ModernStyle.COLORS['surface'],
                fg=ModernStyle.COLORS['text_secondary'],
                font=ModernStyle.FONTS['small']).pack(side='left')
        
        time_str = notification['timestamp'].strftime("%d.%m.%Y %H:%M")
        tk.Label(top_frame, text=time_str,
                bg=ModernStyle.COLORS['surface'],
                fg=ModernStyle.COLORS['text_secondary'],
                font=ModernStyle.FONTS['small']).pack(side='right')
        
        # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_label = tk.Label(frame, text=notification['message'],
                               bg=ModernStyle.COLORS['surface'],
                               fg=ModernStyle.COLORS['text_primary'],
                               font=ModernStyle.FONTS['body'],
                               justify='left',
                               wraplength=550)
        message_label.pack(fill='x', pady=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö)
        if not notification['read']:
            def mark_read():
                self.notification_system.mark_as_read(notification['id'])
                self.refresh()
            
            btn_frame = tk.Frame(frame, bg=ModernStyle.COLORS['surface'])
            btn_frame.pack(fill='x', pady=(5, 0))
            
            ttk.Button(btn_frame, text="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ",
                      style='Secondary.TButton',
                      command=mark_read).pack(side='right')
        
        return frame
    
    def refresh(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.notifications_frame.winfo_children():
            widget.destroy()
        
        # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        notifications = self.notification_system.get_notifications_by_priority()
        
        if not notifications:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            empty_frame = tk.Frame(self.notifications_frame, bg=ModernStyle.COLORS['surface'], height=100)
            empty_frame.pack(fill='both', expand=True, pady=20)
            empty_frame.pack_propagate(False)
            
            tk.Label(empty_frame, text="üéâ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                    bg=ModernStyle.COLORS['surface'],
                    fg=ModernStyle.COLORS['text_secondary'],
                    font=ModernStyle.FONTS['h3']).pack(expand=True)
            
            tk.Label(empty_frame, text="–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!",
                    bg=ModernStyle.COLORS['surface'],
                    fg=ModernStyle.COLORS['text_secondary'],
                    font=ModernStyle.FONTS['body']).pack()
        else:
            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for notification in notifications:
                self.create_notification_widget(self.notifications_frame, notification)
    
    def mark_all_read(self):
        """–ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        self.notification_system.mark_all_read()
        self.refresh()
    
    def clear_old(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.notification_system.clear_old_notifications()
        self.refresh()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system = NotificationSystem(DB_NAME)

# ================== –°–û–í–†–ï–ú–ï–ù–ù–´–ô –°–¢–ò–õ–¨ ==================
class ModernStyle:
    COLORS = {
        'primary': '#2E86AB',
        'primary_dark': '#1A5A7A',
        'secondary': '#A23B72',
        'accent': '#F18F01',
        'success': '#4CAF50',
        'warning': '#FF9800',
        'error': '#F44336',
        'background': '#F8F9FA',
        'surface': '#FFFFFF',
        'text_primary': '#212529',
        'text_secondary': '#6C757D',
        'border': '#DEE2E6'
    }
    
    FONTS = {
        'h1': ('Segoe UI', 20, 'bold'),
        'h2': ('Segoe UI', 16, 'bold'),
        'h3': ('Segoe UI', 14, 'bold'),
        'body': ('Segoe UI', 11),
        'small': ('Segoe UI', 10),
        'button': ('Segoe UI', 11, 'bold')
    }

def setup_modern_style():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è"""
    style = ttk.Style()
    
    try:
        style.theme_use('vista')
    except:
        try:
            style.theme_use('clam')
        except:
            pass
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
    style.configure('Modern.TFrame', background=ModernStyle.COLORS['background'])
    style.configure('Modern.TLabel', background=ModernStyle.COLORS['background'], 
                   foreground=ModernStyle.COLORS['text_primary'], font=ModernStyle.FONTS['body'])
    style.configure('Primary.TButton', background=ModernStyle.COLORS['primary'], 
                   foreground='white', font=ModernStyle.FONTS['button'], borderwidth=0)
    style.configure('Secondary.TButton', background=ModernStyle.COLORS['surface'], 
                   foreground=ModernStyle.COLORS['primary'], font=ModernStyle.FONTS['button'])
    
    style.map('Primary.TButton',
              background=[('active', ModernStyle.COLORS['primary_dark']),
                         ('pressed', ModernStyle.COLORS['primary_dark'])])
    
    style.map('Secondary.TButton',
              background=[('active', ModernStyle.COLORS['border']),
                         ('pressed', ModernStyle.COLORS['border'])])
    
    # –°—Ç–∏–ª—å –¥–ª—è Treeview
    style.configure('Modern.Treeview', 
                   background=ModernStyle.COLORS['surface'],
                   fieldbackground=ModernStyle.COLORS['surface'],
                   foreground=ModernStyle.COLORS['text_primary'],
                   font=ModernStyle.FONTS['body'],
                   rowheight=25)
    
    style.configure('Modern.Treeview.Heading', 
                   background=ModernStyle.COLORS['primary'],
                   foreground='white',
                   font=ModernStyle.FONTS['button'],
                   relief='flat')
    
    style.map('Modern.Treeview', 
              background=[('selected', ModernStyle.COLORS['primary'])],
              foreground=[('selected', 'white')])

# ----------------------
# --- –£—Ç–∏–ª–∏—Ç—ã –§–ò–û ------
# ----------------------
def split_fio(fio: str):
    if not fio:
        return "", "", ""
    parts = fio.strip().split()
    if len(parts) == 1:
        return parts[0], "", ""
    if len(parts) == 2:
        return parts[0], parts[1], ""
    last = parts[0]
    first = parts[1]
    middle = " ".join(parts[2:])
    return last, first, middle

def join_fio(last, first, middle):
    parts = [p for p in (last or "", first or "", middle or "") if p and p.strip()]
    return " ".join(parts)

# ================== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ==================
def init_db():
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å—Ö–µ–º—É –∏–ª–∏ –º–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—É—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    max_retries = 5
    retry_delay = 0.1
    
    for attempt in range(max_retries):
        try:
            with sqlite3.connect(DB_NAME, timeout=10.0) as conn:
                cur = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã clients
                cur.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' AND name='clients'
                """)
                table_exists = cur.fetchone() is not None
                
                if not table_exists:
                    print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É clients...")
                    cur.execute(
                        """
                        CREATE TABLE IF NOT EXISTS clients (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            last_name TEXT NOT NULL,
                            first_name TEXT NOT NULL,
                            middle_name TEXT,
                            dob TEXT NOT NULL,
                            phone TEXT,
                            contract_number TEXT,
                            ippcu_start TEXT,
                            ippcu_end TEXT,
                            group_name TEXT,
                            UNIQUE(last_name, first_name, middle_name, dob)
                        )
                        """
                    )
                    conn.commit()
                    print("–¢–∞–±–ª–∏—Ü–∞ clients —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
                cur.execute("PRAGMA table_info(clients)")
                cols = [r[1] for r in cur.fetchall()]

                if "fio" in cols and "last_name" not in cols:
                    print("–ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ö–µ–º—É...")
                    cur.execute(
                        """
                        CREATE TABLE IF NOT EXISTS clients_new (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            last_name TEXT NOT NULL,
                            first_name TEXT NOT NULL,
                            middle_name TEXT,
                            dob TEXT NOT NULL,
                            phone TEXT,
                            contract_number TEXT,
                            ippcu_start TEXT,
                            ippcu_end TEXT,
                            group_name TEXT,
                            UNIQUE(last_name, first_name, middle_name, dob)
                        )
                        """
                    )
                    cur.execute("SELECT id, fio, dob, phone, contract_number, ippcu_start, ippcu_end, group_name FROM clients")
                    rows = cur.fetchall()
                    for r in rows:
                        _, fio, dob, phone, contract_number, ippcu_start, ippcu_end, group_name = r
                        last, first, middle = split_fio(fio or "")
                        dob_val = dob or ""
                        try:
                            cur.execute(
                                """
                                INSERT OR IGNORE INTO clients_new
                                (id, last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group_name)
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                """,
                                (None, last, first, middle, dob_val, phone, contract_number, ippcu_start, ippcu_end, group_name)
                            )
                        except Exception:
                            cur.execute(
                                "INSERT OR IGNORE INTO clients_new (last_name, first_name, middle_name, dob) VALUES (?, ?, ?, ?)",
                                (last or "", first or "", middle or "", dob_val)
                            )
                    cur.execute("DROP TABLE clients")
                    cur.execute("ALTER TABLE clients_new RENAME TO clients")
                    conn.commit()
                    print("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                try:
                    if "last_name" not in cols:
                        cur.execute("ALTER TABLE clients ADD COLUMN last_name TEXT")
                    if "first_name" not in cols:
                        cur.execute("ALTER TABLE clients ADD COLUMN first_name TEXT")
                    if "middle_name" not in cols:
                        cur.execute("ALTER TABLE clients ADD COLUMN middle_name TEXT")
                    conn.commit()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")

                print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                break
                
        except sqlite3.OperationalError as e:
            if "locked" in str(e) and attempt < max_retries - 1:
                print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}...")
                time.sleep(retry_delay)
                retry_delay *= 2
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                raise e

def add_client(last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–µ–π (–ø–æ –§–ò–û+–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)."""
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        middle_name = middle_name or ""
        dob_val = dob or ""

        cur.execute(
            """
            SELECT id FROM clients
            WHERE lower(last_name)=lower(?) AND lower(first_name)=lower(?) AND lower(COALESCE(middle_name,''))=lower(?) AND dob=?
            """,
            (last_name, first_name, middle_name, dob_val)
        )
        if cur.fetchone():
            raise ValueError(f"–ö–ª–∏–µ–Ω—Ç '{join_fio(last_name, first_name, middle_name)}' —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è {dob_val} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")

        cur.execute(
            """
            INSERT INTO clients (last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group_name)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (last_name, first_name, middle_name, dob_val, phone, contract_number, ippcu_start, ippcu_end, group),
        )
        conn.commit()

def get_all_clients(limit=200):
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute(
            """
            SELECT id, last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group_name
            FROM clients
            ORDER BY lower(last_name), lower(first_name)
            LIMIT ?
            """,
            (limit,),
        )
        return cur.fetchall()

def search_clients(query="", date_from=None, date_to=None, limit=200):
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        q = (query or "").strip().lower()
        like = f"%{q}%"

        sql = """
            SELECT id, last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group_name
            FROM clients
            WHERE ( lower(last_name) LIKE ? OR lower(first_name) LIKE ? OR lower(COALESCE(middle_name,'')) LIKE ?
                   OR lower(contract_number) LIKE ? OR lower(phone) LIKE ? OR lower(COALESCE(group_name,'')) LIKE ? )
        """
        params = [like, like, like, like, like, like]

        if date_from:
            sql += " AND DATE(ippcu_end) >= DATE(?) "
            params.append(date_from)
        if date_to:
            sql += " AND DATE(ippcu_end) <= DATE(?) "
            params.append(date_to)

        sql += " ORDER BY lower(last_name), lower(first_name) LIMIT ?"
        params.append(limit)

        cur.execute(sql, params)
        return cur.fetchall()

def update_client(cid, last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group):
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute(
            """
            UPDATE clients
            SET last_name=?, first_name=?, middle_name=?, dob=?, phone=?, contract_number=?, ippcu_start=?, ippcu_end=?, group_name=?
            WHERE id=?
            """,
            (last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group, cid),
        )
        conn.commit()

def delete_client(cid):
    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        cur.execute("DELETE FROM clients WHERE id=?", (cid,))
        conn.commit()

# ================== Google Sheets ==================
def get_gsheet(sheet_id, sheet_name="–õ–∏—Å—Ç1"):
    scopes = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
    creds_json = os.getenv("GOOGLE_CREDENTIALS")

    if not creds_json:
        if getattr(sys, "frozen", False):
            exe_dir = os.path.dirname(sys.executable)
        else:
            exe_dir = os.path.dirname(os.path.abspath(__file__))
        creds_path = os.path.join(exe_dir, "credentials.json")
        if not os.path.exists(creds_path):
            raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_CREDENTIALS –∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ credentials.json —Ä—è–¥–æ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π!")
        with open(creds_path, "r", encoding="utf-8") as f:
            creds_json = f.read()

    creds = Credentials.from_service_account_info(json.loads(creds_json), scopes=scopes)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(sheet_id).worksheet(sheet_name)
    return sheet

def import_from_gsheet():
    try:
        sheet = get_gsheet(SHEET_ID)
        data = sheet.get_all_records()

        added = 0
        for row in data:
            fio_raw = row.get("–§–ò–û", "") or ""
            last, first, middle = split_fio(fio_raw)
            dob = row.get("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "") or ""
            phone = row.get("–¢–µ–ª–µ—Ñ–æ–Ω", "") or ""
            contract = row.get("–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", "") or ""
            ippcu_start = row.get("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£", "") or ""
            ippcu_end = row.get("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£", "") or ""
            group = row.get("–ì—Ä—É–ø–ø–∞", "") or ""
            try:
                add_client(last, first, middle, dob, phone, contract, ippcu_start, ippcu_end, group)
                added += 1
            except ValueError:
                continue
        refresh_tree()
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets –∑–∞–≤–µ—Ä—à—ë–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}")
    except Exception as e:
        traceback.print_exc()
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n{e}")

# ================== –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ==================
def create_modern_table(parent):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    table_container = tk.Frame(parent, bg=ModernStyle.COLORS['background'])
    table_container.pack(fill='both', expand=True, padx=20, pady=10)
    
    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
    scrollbar = ttk.Scrollbar(table_container)
    scrollbar.pack(side='right', fill='y')
    
    # –¢–∞–±–ª–∏—Ü–∞
    columns = ("‚úì", "ID", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", 
               "–¢–µ–ª–µ—Ñ–æ–Ω", "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£", 
               "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£", "–ì—Ä—É–ø–ø–∞")
    
    tree = ttk.Treeview(table_container, columns=columns, show="headings", 
                       style='Modern.Treeview', yscrollcommand=scrollbar.set,
                       height=20)
    tree.pack(side='left', fill='both', expand=True)
    scrollbar.config(command=tree.yview)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    for col in columns:
        tree.heading(col, text=col)
    
    return tree, table_container
    
def create_modern_header(root):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    header_frame = tk.Frame(root, bg=ModernStyle.COLORS['primary'], height=80)
    header_frame.pack(fill='x', padx=0, pady=0)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_frame = tk.Frame(header_frame, bg=ModernStyle.COLORS['primary'])
    title_frame.pack(fill='x', padx=20, pady=12)
    
    title_label = tk.Label(title_frame, 
                          text="–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è",
                          bg=ModernStyle.COLORS['primary'],
                          fg='white',
                          font=ModernStyle.FONTS['h1'])
    title_label.pack(side='left')
    
    subtitle_label = tk.Label(title_frame,
                             text="–ü–æ–ª—É—Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                             bg=ModernStyle.COLORS['primary'],
                             fg='white',
                             font=ModernStyle.FONTS['h3'])
    subtitle_label.pack(side='left', padx=(15, 0))
    
    return header_frame

def create_search_panel(root):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞"""
    search_frame = tk.Frame(root, bg=ModernStyle.COLORS['background'], padx=20, pady=15)
    search_frame.pack(fill='x', padx=0, pady=0)
    
    # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    search_container = tk.Frame(search_frame, bg=ModernStyle.COLORS['surface'], 
                               relief='solid', bd=1, padx=10, pady=8)
    search_container.pack(fill='x', padx=0, pady=0)
    
    tk.Label(search_container, text="üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:", 
             bg=ModernStyle.COLORS['surface'],
             fg=ModernStyle.COLORS['text_primary'],
             font=ModernStyle.FONTS['h3']).pack(side='left', padx=(0, 10))
    
    search_entry = tk.Entry(search_container, width=40, font=ModernStyle.FONTS['body'],
                           relief='flat', bg=ModernStyle.COLORS['background'], bd=0)
    search_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
    
    search_btn = ttk.Button(search_container, text="–ù–∞–π—Ç–∏", style='Primary.TButton',
                           command=lambda: do_search())
    search_btn.pack(side='left', padx=(0, 20))
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º
    filters_frame = tk.Frame(search_container, bg=ModernStyle.COLORS['surface'])
    filters_frame.pack(side='left')
    
    tk.Label(filters_frame, text="–ò–ü–ü–°–£ –¥–æ:", 
             bg=ModernStyle.COLORS['surface'],
             fg=ModernStyle.COLORS['text_secondary'],
             font=ModernStyle.FONTS['small']).pack(side='left', padx=(0, 5))
    
    date_from_entry = DateEntry(filters_frame, width=10, date_pattern="dd.mm.yyyy",
                               font=ModernStyle.FONTS['small'], background=ModernStyle.COLORS['primary'],
                               foreground='white', borderwidth=0)
    date_from_entry.pack(side='left', padx=(0, 10))
    
    tk.Label(filters_frame, text="‚Äì", 
             bg=ModernStyle.COLORS['surface'],
             fg=ModernStyle.COLORS['text_secondary'],
             font=ModernStyle.FONTS['small']).pack(side='left', padx=(0, 10))
    
    date_to_entry = DateEntry(filters_frame, width=10, date_pattern="dd.mm.yyyy",
                             font=ModernStyle.FONTS['small'], background=ModernStyle.COLORS['primary'],
                             foreground='white', borderwidth=0)
    date_to_entry.pack(side='left', padx=(0, 10))
    
    filter_btn = ttk.Button(filters_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", style='Secondary.TButton',
                           command=lambda: do_search())
    filter_btn.pack(side='left')
    
    return search_entry, date_from_entry, date_to_entry, search_frame

def create_toolbar(root):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    toolbar_frame = tk.Frame(root, bg=ModernStyle.COLORS['surface'], padx=20, pady=10)
    toolbar_frame.pack(fill='x', padx=0, pady=0)
    
    buttons = [
        ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", add_window, 'Primary.TButton', "Ctrl+N"),
        ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", edit_client, 'Secondary.TButton', "Ctrl+E"),
        ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", delete_selected, 'Secondary.TButton', "Delete"),
        ("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", lambda: quick_view_wrapper(), 'Secondary.TButton', "Ctrl+Q"),
        ("üì• –ò–º–ø–æ—Ä—Ç", import_from_gsheet, 'Secondary.TButton', "Ctrl+I"),
        ("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word", export_selected_to_word, 'Secondary.TButton', "Ctrl+W"),
        ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", show_statistics, 'Secondary.TButton', ""),
        ("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", show_notifications, 'Secondary.TButton', "F2"),
        ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", settings_window, 'Secondary.TButton', "")
    ]
    
    for text, command, style_name, shortcut in buttons:
        btn = ttk.Button(toolbar_frame, text=text, command=command, style=style_name)
        btn.pack(side='left', padx=(0, 8))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞":
            root.add_btn = btn
        elif text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å":
            root.delete_btn = btn
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ–π
        if shortcut:
            tooltip_text = f"{text} ({shortcut})"
            create_tooltip(btn, tooltip_text)

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if AUTH_AVAILABLE:
        profile_btn = ttk.Button(toolbar_frame, text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", 
                               command=show_user_profile, style='Secondary.TButton')
        profile_btn.pack(side='right', padx=(0, 8))

    # –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
    help_btn = ttk.Button(toolbar_frame, text="‚ùì –°–ø—Ä–∞–≤–∫–∞", 
                         command=show_help, style='Secondary.TButton')
    help_btn.pack(side='right')
    create_tooltip(help_btn, "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º (F1)")
    
    return toolbar_frame

def create_status_bar(root):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    status_frame = tk.Frame(root, bg=ModernStyle.COLORS['primary'], height=30)
    status_frame.pack(fill='x', side='bottom', padx=0, pady=0)
    status_frame.pack_propagate(False)
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    db_status_label = tk.Label(status_frame, text="üü¢ –ë–î", 
                              bg=ModernStyle.COLORS['primary'],
                              fg='white', font=ModernStyle.FONTS['small'])
    db_status_label.pack(side='left', padx=(10, 0), pady=5)
    
    status_label = tk.Label(status_frame, text="–ì–æ—Ç–æ–≤–æ", 
                           bg=ModernStyle.COLORS['primary'],
                           fg='white', font=ModernStyle.FONTS['small'])
    status_label.pack(side='left', padx=10, pady=5)
    
    word_count_label = tk.Label(status_frame, text="–í—ã–±—Ä–∞–Ω–æ –¥–ª—è Word: 0", 
                               bg=ModernStyle.COLORS['primary'],
                               fg='white', font=ModernStyle.FONTS['small'])
    word_count_label.pack(side='right', padx=10, pady=5)
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_status_label = tk.Label(status_frame, text="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", 
                                bg=ModernStyle.COLORS['primary'],
                                fg='white', font=ModernStyle.FONTS['small'])
    user_status_label.pack(side='right', padx=10, pady=5)
    
    root.status_label = status_label
    root.word_count_label = word_count_label
    root.user_status_label = user_status_label
    root.db_status_label = db_status_label
    
    def update_word_count():
        count = sum(1 for row_id in tree.get_children() 
                   if tree.item(row_id, "values")[0] == "X")
        word_count_label.config(text=f"–í—ã–±—Ä–∞–Ω–æ –¥–ª—è Word: {count}")
    
    def update_db_status():
        try:
            with sqlite3.connect(DB_NAME, timeout=5.0) as conn:
                cur = conn.cursor()
                cur.execute("SELECT 1")
            db_status_label.config(text="üü¢ –ë–î")
        except sqlite3.OperationalError:
            db_status_label.config(text="üî¥ –ë–î")
        root.after(5000, update_db_status)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    root.update_word_count = update_word_count
    root.after(1000, update_db_status)
    return status_frame

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
def settings_window():
    """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    settings_win = tk.Toplevel(root)
    settings_win.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    settings_win.geometry("500x400")
    settings_win.configure(bg=ModernStyle.COLORS['background'])
    settings_win.resizable(False, False)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = tk.Frame(settings_win, bg=ModernStyle.COLORS['primary'], height=50)
    header.pack(fill='x', padx=0, pady=0)
    
    tk.Label(header, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
            bg=ModernStyle.COLORS['primary'],
            fg='white',
            font=ModernStyle.FONTS['h2']).pack(pady=10)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    content_frame = tk.Frame(settings_win, bg=ModernStyle.COLORS['background'], padx=20, pady=20)
    content_frame.pack(fill='both', expand=True)
    
    # –ü—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['background'])
    export_frame.pack(fill='x', pady=10)
    
    tk.Label(export_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text_primary'],
            font=ModernStyle.FONTS['body']).pack(anchor='w')
    
    export_path_frame = tk.Frame(export_frame, bg=ModernStyle.COLORS['background'])
    export_path_frame.pack(fill='x', pady=5)
    
    export_path_var = tk.StringVar(value=settings_manager.get('default_export_path'))
    export_entry = tk.Entry(export_path_frame, textvariable=export_path_var, 
                           font=ModernStyle.FONTS['body'], width=40)
    export_entry.pack(side='left', fill='x', expand=True, padx=(0, 10))
    
    def browse_export_path():
        from tkinter import filedialog
        folder = filedialog.askdirectory(initialdir=export_path_var.get())
        if folder:
            export_path_var.set(folder)
    
    ttk.Button(export_path_frame, text="–û–±–∑–æ—Ä", 
              style='Secondary.TButton',
              command=browse_export_path).pack(side='right')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['background'])
    notifications_frame.pack(fill='x', pady=10)
    
    show_notifications_var = tk.BooleanVar(value=settings_manager.get('show_notifications', True))
    notifications_check = ttk.Checkbutton(notifications_frame, 
                                        text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ",
                                        variable=show_notifications_var,
                                        style='Modern.TCheckbutton')
    notifications_check.pack(anchor='w')
    
    auto_updates_var = tk.BooleanVar(value=settings_manager.get('auto_check_updates', True))
    updates_check = ttk.Checkbutton(notifications_frame,
                                   text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                                   variable=auto_updates_var,
                                   style='Modern.TCheckbutton')
    updates_check.pack(anchor='w', pady=(5, 0))
    
    # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
    button_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['background'])
    button_frame.pack(fill='x', pady=20)
    
    def save_settings():
        settings_manager.set('default_export_path', export_path_var.get())
        settings_manager.set('show_notifications', show_notifications_var.get())
        settings_manager.set('auto_check_updates', auto_updates_var.get())
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        settings_win.destroy()
    
    ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
              style='Primary.TButton',
              command=save_settings).pack(side='right', padx=(10, 0))
    
    ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", 
              style='Secondary.TButton',
              command=settings_win.destroy).pack(side='right')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    info_frame = tk.Frame(content_frame, bg=ModernStyle.COLORS['background'])
    info_frame.pack(fill='x', pady=20)
    
    tk.Label(info_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:",
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text_primary'],
            font=ModernStyle.FONTS['h3']).pack(anchor='w')
    
    info_text = f"""
–í–µ—Ä—Å–∏—è: 1.0
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}
–ü–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {APP_DIR}
    """
    
    tk.Label(info_frame, text=info_text,
            bg=ModernStyle.COLORS['background'],
            fg=ModernStyle.COLORS['text_secondary'],
            font=ModernStyle.FONTS['small'],
            justify='left').pack(anchor='w', pady=5)

# ================== –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò ==================
def setup_search_behavior():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
    def on_search_enter(event):
        do_search()
    
    if hasattr(root, 'search_entry') and root.search_entry:
        root.search_entry.bind('<Return>', on_search_enter)

def setup_keyboard_shortcuts():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    root.bind('<Control-n>', lambda e: add_window())
    root.bind('<Control-f>', lambda e: root.search_entry.focus())
    root.bind('<Control-s>', lambda e: do_search())
    root.bind('<Delete>', lambda e: delete_selected())
    root.bind('<F5>', lambda e: refresh_tree())
    root.bind('<F1>', lambda e: show_help())
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    root.bind('<Control-q>', lambda e: quick_view_wrapper())
    root.bind('<Control-e>', lambda e: edit_client())
    root.bind('<Control-i>', lambda e: import_from_gsheet())
    root.bind('<Control-w>', lambda e: export_selected_to_word())
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    root.bind('<F2>', lambda e: show_notifications())
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –æ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à–∞—Ö
    show_status_message("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ F1 –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

def quick_view_wrapper():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–µ–π"""
    selected = tree.selection()
    if selected:
        client_id = tree.item(selected[0], "values")[1]
        quick_view(client_id)
    else:
        messagebox.showinfo("–ü–æ–¥—Å–∫–∞–∑–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

def show_help():
    """–û–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º"""
    help_text = """
üìã –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
Ctrl+N - –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
Ctrl+F - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–æ–∏—Å–∫
Ctrl+S - –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫
Delete - –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
F5 - –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫

–ù–∞–≤–∏–≥–∞—Ü–∏—è:
Ctrl+Q - –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
Ctrl+E - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
Ctrl+I - –ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets  
Ctrl+W - –≠–∫—Å–ø–æ—Ä—Ç –≤ Word

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
F2 - –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–°–ø—Ä–∞–≤–∫–∞:
F1 - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π:
‚Üê/‚Üí - –ò–∑–º–µ–Ω–∏—Ç—å —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–∫–∏
Double Click - –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∫–æ–ª–æ–Ω–∫–∏
–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
"""
    
    help_window = tk.Toplevel(root)
    help_window.title("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º")
    help_window.geometry("500x500")
    help_window.configure(bg=ModernStyle.COLORS['background'])
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = tk.Frame(help_window, bg=ModernStyle.COLORS['primary'], height=50)
    header.pack(fill='x', padx=0, pady=0)
    
    tk.Label(header, text="‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", 
            bg=ModernStyle.COLORS['primary'],
            fg='white',
            font=ModernStyle.FONTS['h2']).pack(pady=10)
    
    # –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    text_frame = tk.Frame(help_window, bg=ModernStyle.COLORS['background'])
    text_frame.pack(fill='both', expand=True, padx=20, pady=20)
    
    help_text_widget = tk.Text(text_frame, 
                              font=ModernStyle.FONTS['body'],
                              bg=ModernStyle.COLORS['surface'],
                              fg=ModernStyle.COLORS['text_primary'],
                              wrap='word',
                              padx=10,
                              pady=10)
    help_text_widget.pack(fill='both', expand=True)
    
    help_text_widget.insert('1.0', help_text)
    help_text_widget.config(state='disabled')  # –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    button_frame = tk.Frame(help_window, bg=ModernStyle.COLORS['background'])
    button_frame.pack(fill='x', padx=20, pady=10)
    
    ttk.Button(button_frame, text="–ó–∞–∫—Ä—ã—Ç—å", 
              style='Primary.TButton',
              command=help_window.destroy).pack(side='right')

# ================== –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ ==================
def auto_resize_columns(tree, max_width=400):
    """–ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω–µ"""
    tree.update_idletasks()
    
    column_priority = {
        "–§–∞–º–∏–ª–∏—è": 2, "–ò–º—è": 2, "–û—Ç—á–µ—Å—Ç–≤–æ": 2, 
        "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è": 1, "–¢–µ–ª–µ—Ñ–æ–Ω": 1, "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞": 1,
        "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£": 1, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£": 1, "–ì—Ä—É–ø–ø–∞": 1,
        "‚úì": 0, "ID": 0
    }
    
    for col in tree["columns"]:
        header_text = tree.heading(col)["text"]
        header_width = tk.font.Font().measure(header_text) + 30
        
        content_width = header_width
        for item in tree.get_children():
            cell_value = str(tree.set(item, col))
            cell_width = tk.font.Font().measure(cell_value) + 20
            if cell_width > content_width:
                content_width = cell_width
        
        priority = column_priority.get(header_text, 1)
        if priority == 0:
            final_width = min(content_width, 80)
        elif priority == 2:
            final_width = min(content_width, max_width)
        else:
            final_width = min(content_width, 150)
        
        tree.column(col, width=final_width, minwidth=30)

def setup_tree_behavior(tree):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    def on_header_click(event):
        region = tree.identify("region", event.x, event.y)
        if region == "separator":
            column = tree.identify_column(event.x)
            col_id = column.replace("#", "")
            columns = tree["columns"]
            if col_id.isdigit() and int(col_id) <= len(columns):
                col_name = columns[int(col_id)-1]
                auto_resize_single_column(tree, col_name)
    
    tree.bind("<Double-1>", on_header_click)

def auto_resize_single_column(tree, col_name):
    """–ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏"""
    tree.update_idletasks()
    
    header_text = tree.heading(col_name)["text"]
    header_width = tk.font.Font().measure(header_text) + 30
    
    content_width = header_width
    for item in tree.get_children():
        cell_value = str(tree.set(item, col_name))
        cell_width = tk.font.Font().measure(cell_value) + 20
        if cell_width > content_width:
            content_width = cell_width
    
    final_width = min(content_width, 400)
    tree.column(col_name, width=final_width)

def setup_initial_columns(tree):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫"""
    tree.column("‚úì", width=30, minwidth=20, stretch=False)
    tree.column("ID", width=40, minwidth=30, stretch=False)
    tree.column("–§–∞–º–∏–ª–∏—è", width=120, minwidth=80)
    tree.column("–ò–º—è", width=120, minwidth=80)
    tree.column("–û—Ç—á–µ—Å—Ç–≤–æ", width=120, minwidth=80)
    tree.column("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", width=100, minwidth=80)
    tree.column("–¢–µ–ª–µ—Ñ–æ–Ω", width=120, minwidth=80)
    tree.column("–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", width=120, minwidth=80)
    tree.column("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£", width=120, minwidth=80)
    tree.column("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£", width=120, minwidth=80)
    tree.column("–ì—Ä—É–ø–ø–∞", width=100, minwidth=80)

# ================== –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é ==================
def show_context_menu(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø–æ –ø—Ä–∞–≤–æ–º—É –∫–ª–∏–∫—É"""
    item = tree.identify_row(event.y)
    if not item:
        return
    
    tree.selection_set(item)
    context_menu = tk.Menu(root, tearoff=0)
    
    values = tree.item(item, "values")
    client_id = values[1]
    last_name = values[2]
    first_name = values[3]
    client_name = f"{last_name} {first_name}"
    
    context_menu.add_command(
        label=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {client_name} (Ctrl+E)", 
        command=edit_client
    )
    context_menu.add_command(
        label=f"–£–¥–∞–ª–∏—Ç—å: {client_name} (Delete)", 
        command=delete_selected
    )
    context_menu.add_separator()
    context_menu.add_command(
        label="–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (Ctrl+Q)", 
        command=lambda: quick_view(client_id)
    )
    context_menu.add_command(
        label="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –§–ò–û", 
        command=lambda: copy_to_clipboard(f"{last_name} {first_name} {values[4] or ''}".strip())
    )
    context_menu.add_command(
        label="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", 
        command=lambda: copy_to_clipboard(values[6] or "")
    )
    context_menu.add_separator()
    context_menu.add_command(
        label="–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ Word", 
        command=lambda: add_to_word_list(item)
    )
    context_menu.add_separator()
    context_menu.add_command(
        label="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≥–æ—Ä—è—á–∏–º –∫–ª–∞–≤–∏—à–∞–º (F1)", 
        command=show_help
    )
    
    try:
        context_menu.tk_popup(event.x_root, event.y_root)
    finally:
        context_menu.grab_release()

# ================== UI –§–£–ù–ö–¶–ò–ò ==================
def refresh_tree(results=None):
    # –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    for row in tree.get_children():
        tree.delete(row)

    # –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî –±–µ—Ä—ë–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    if results is None:
        results = get_all_clients(limit=200)

    today = datetime.today().date()
    soon = today + timedelta(days=30)

    for row in results:
        cid, last, first, middle, dob, phone, contract, ippcu_start, ippcu_end, group = row
        tag = ""
        try:
            if ippcu_end:
                end_date = datetime.strptime(ippcu_end, "%Y-%m-%d").date()
                if end_date < today:
                    tag = "expired"   # —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫
                elif end_date <= soon:
                    tag = "soon"      # –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–∫–æ—Ä–æ
                else:
                    tag = "active"    # –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç
        except Exception:
            tag = ""

        tree.insert(
            "",
            "end",
            values=(" ", cid, last, first, middle, dob, phone, contract, ippcu_start, ippcu_end, group),
            tags=(tag,)
        )

    # –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º
    tree.tag_configure("expired", background="#F8D7DA")   # –∫—Ä–∞—Å–Ω—ã–π (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω)
    tree.tag_configure("soon", background="#FFF3CD")      # –∂—ë–ª—Ç—ã–π (—Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á—ë—Ç)
    tree.tag_configure("active", background="#D4EDDA")    # –∑–µ–ª—ë–Ω—ã–π (–∞–∫—Ç–∏–≤–Ω—ã–π)

    
    root.after(100, lambda: auto_resize_columns(tree))

def add_window():
    win = tk.Toplevel()
    win.title("–î–æ–±–∞–≤–∏—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º–æ–≥–æ")
    win.configure(bg=ModernStyle.COLORS['background'])

    fields = [
        ("–§–∞–º–∏–ª–∏—è", 0), ("–ò–º—è", 1), ("–û—Ç—á–µ—Å—Ç–≤–æ", 2),
        ("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", 3), ("–¢–µ–ª–µ—Ñ–æ–Ω", 4), ("–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", 5),
        ("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£", 6), ("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£", 7), ("–ì—Ä—É–ø–ø–∞", 8)
    ]

    entries = {}
    for field, row in fields:
        tk.Label(win, text=field, bg=ModernStyle.COLORS['background'],
                fg=ModernStyle.COLORS['text_primary'], font=ModernStyle.FONTS['body']).grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        if "–î–∞—Ç–∞" in field:
            entry = DateEntry(win, width=27, date_pattern="dd.mm.yyyy",
                            font=ModernStyle.FONTS['body'])
        else:
            entry = tk.Entry(win, width=30, font=ModernStyle.FONTS['body'])
        
        entry.grid(row=row, column=1, padx=10, pady=5)
        entries[field] = entry

    def save_client():
        last = entries["–§–∞–º–∏–ª–∏—è"].get().strip()
        first = entries["–ò–º—è"].get().strip()
        middle = entries["–û—Ç—á–µ—Å—Ç–≤–æ"].get().strip()
        dob = entries["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"].get_date().strftime("%Y-%m-%d")
        phone = entries["–¢–µ–ª–µ—Ñ–æ–Ω"].get().strip()
        contract_number = entries["–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"].get().strip()
        ippcu_start = entries["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£"].get_date().strftime("%Y-%m-%d")
        ippcu_end = entries["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£"].get_date().strftime("%Y-%m-%d")
        group = entries["–ì—Ä—É–ø–ø–∞"].get().strip()

        if not last or not first or not dob:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—è '–§–∞–º–∏–ª–∏—è', '–ò–º—è' –∏ '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")
            return

        try:
            add_client(last, first, middle, dob, phone, contract_number, ippcu_start, ippcu_end, group)
            refresh_tree()
            win.destroy()
        except ValueError as ve:
            messagebox.showwarning("–î—É–±–ª–∏–∫–∞—Ç", str(ve))
        except Exception as e:
            traceback.print_exc()
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:\n{e}")

    save_btn = ttk.Button(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style='Primary.TButton', command=save_client)
    save_btn.grid(row=9, column=0, columnspan=2, pady=10)

def edit_client():
    """–û–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    values = tree.item(selected[0], "values")
    cid = values[1]

    last, first, middle = values[2], values[3], values[4]
    dob, phone, contract = values[5], values[6], values[7]
    ippcu_start, ippcu_end, group = values[8], values[9], values[10]

    win = tk.Toplevel(root)
    win.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    win.configure(bg=ModernStyle.COLORS['background'])

    fields = [
        ("–§–∞–º–∏–ª–∏—è", last, 0), ("–ò–º—è", first, 1), ("–û—Ç—á–µ—Å—Ç–≤–æ", middle, 2),
        ("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", dob, 3), ("–¢–µ–ª–µ—Ñ–æ–Ω", phone, 4), ("–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", contract, 5),
        ("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£", ippcu_start, 6), ("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£", ippcu_end, 7), ("–ì—Ä—É–ø–ø–∞", group, 8)
    ]

    entries = {}
    for field, value, row in fields:
        tk.Label(win, text=field, bg=ModernStyle.COLORS['background'],
                fg=ModernStyle.COLORS['text_primary'], font=ModernStyle.FONTS['body']).grid(row=row, column=0, padx=10, pady=5, sticky="w")
        
        if "–î–∞—Ç–∞" in field:
            entry = tk.Entry(win, width=30, font=ModernStyle.FONTS['body'])
            entry.insert(0, value)
        else:
            entry = tk.Entry(win, width=30, font=ModernStyle.FONTS['body'])
            entry.insert(0, value)
        
        entry.grid(row=row, column=1, padx=10, pady=5)
        entries[field] = entry

    def save_changes():
        update_client(cid,
                      entries["–§–∞–º–∏–ª–∏—è"].get(), entries["–ò–º—è"].get(), entries["–û—Ç—á–µ—Å—Ç–≤–æ"].get(),
                      entries["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"].get(), entries["–¢–µ–ª–µ—Ñ–æ–Ω"].get(), entries["–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"].get(),
                      entries["–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ò–ü–ü–°–£"].get(), entries["–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ò–ü–ü–°–£"].get(), entries["–ì—Ä—É–ø–ø–∞"].get())
        refresh_tree()
        win.destroy()

    save_btn = ttk.Button(win, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style='Primary.TButton', command=save_changes)
    save_btn.grid(row=9, column=0, columnspan=2, pady=10)

def delete_selected():
    selected = tree.selection()
    if not selected:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    item = tree.item(selected[0])
    cid = item["values"][1]
    if messagebox.askyesno("–£–¥–∞–ª–∏—Ç—å", "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?"):
        delete_client(cid)
        refresh_tree()

def do_search():
    query = root.search_entry.get().strip()
    date_from = root.date_from_entry.get_date().strftime("%Y-%m-%d") if root.date_from_entry.get() else None
    date_to = root.date_to_entry.get_date().strftime("%Y-%m-%d") if root.date_to_entry.get() else None

    with sqlite3.connect(DB_NAME) as conn:
        cur = conn.cursor()
        q = (query or "").strip().lower()
        like = f"%{q}%"

        sql = """
            SELECT id, last_name, first_name, middle_name, dob, phone, contract_number, ippcu_start, ippcu_end, group_name
            FROM clients
            WHERE (
                lower(last_name) LIKE ?
                OR lower(first_name) LIKE ?
                OR lower(COALESCE(middle_name,'')) LIKE ?
                OR lower(last_name || ' ' || first_name || ' ' || COALESCE(middle_name,'')) LIKE ?
                OR lower(contract_number) LIKE ?
                OR lower(phone) LIKE ?
                OR lower(COALESCE(group_name,'')) LIKE ?
            )
        """
        params = [like, like, like, like, like, like, like]

        if date_from:
            sql += " AND DATE(ippcu_end) >= DATE(?) "
            params.append(date_from)
        if date_to:
            sql += " AND DATE(ippcu_end) <= DATE(?) "
            params.append(date_to)

        sql += " ORDER BY lower(last_name), lower(first_name) LIMIT ?"
        params.append(200)

        cur.execute(sql, params)
        results = cur.fetchall()

    refresh_tree(results)

def toggle_check(event):
    region = tree.identify("region", event.x, event.y)
    if region != "cell":
        return
    col = tree.identify_column(event.x)
    if col != "#1":
        return

    row_id = tree.identify_row(event.y)
    if not row_id:
        return

    values = list(tree.item(row_id, "values"))
    current = values[0]
    values[0] = "X" if current.strip() == "" else " "
    tree.item(row_id, values=values)
    if hasattr(root, 'update_word_count'):
        root.update_word_count()

# ================== –ß–ê–¢ –°–ò–°–¢–ï–ú–ê ==================
def initialize_chat_system(notebook):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞"""
    try:
        from chat_manager import ChatManager
        from chat_ui import ChatUI
        from chat_notifications import ChatNotifications
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
        chat_manager = ChatManager()
        chat_notifications = ChatNotifications(chat_manager)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI —á–∞—Ç–∞
        chat_ui = ChatUI(notebook, chat_manager, ModernStyle.COLORS, ModernStyle.FONTS)
        chat_frame = chat_ui.get_widget()
        notebook.add(chat_frame, text="üí¨ –ß–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        root.chat_manager = chat_manager
        root.chat_ui = chat_ui
        root.chat_notifications = chat_notifications
        
        # –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
        def update_chat_periodically():
            if hasattr(root, 'chat_ui') and root.chat_ui:
                try:
                    root.chat_ui.refresh_chat()
                    root.chat_ui.update_unread_count()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
            root.after(30000, update_chat_periodically)
        
        root.after(5000, update_chat_periodically)
        root.after(4000, lambda: chat_manager.set_user_online(True))
        
        print("‚úÖ –ú–æ–¥—É–ª—å —á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except ImportError as e:
        print(f"‚ùå –ú–æ–¥—É–ª–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: {e}")
        return False

def create_chat_stub(notebook):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —á–∞—Ç–∞"""
    chat_stub_frame = tk.Frame(notebook, bg=ModernStyle.COLORS['background'])
    notebook.add(chat_stub_frame, text="üí¨ –ß–∞—Ç (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    stub_label = tk.Label(chat_stub_frame, 
                        text="–ú–æ–¥—É–ª—å —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                        bg=ModernStyle.COLORS['background'],
                        fg=ModernStyle.COLORS['text_secondary'],
                        font=ModernStyle.FONTS['h3'],
                        justify='center')
    stub_label.pack(expand=True, fill='both', padx=20, pady=20)

# ================== MAIN ==================
def main():
    global root, tree, auth_manager
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    root = tk.Tk()
    root.title("–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    root.geometry("1400x900")
    root.configure(bg=ModernStyle.COLORS['background'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_label = tk.Label(root, text="–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...", 
                            bg=ModernStyle.COLORS['background'],
                            font=ModernStyle.FONTS['h2'])
    loading_label.pack(expand=True)
    root.update()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        setup_auth_system()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        
        loading_label.destroy()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞ –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if AUTH_AVAILABLE and auth_manager and (not getattr(auth_manager, 'current_user', None) or not getattr(auth_manager, 'remember_me', False)):
            show_login_window()
        else:
            initialize_main_application()
            
        root.mainloop()
        
    except Exception as e:
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                           f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}")
        root.destroy()

def initialize_main_application():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("DEBUG: Starting initialize_main_application")
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        if AUTH_AVAILABLE and auth_manager and auth_manager.current_user:
            root.title(f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è - {auth_manager.get_user_display_name()}")
        else:
            root.title("–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è - –î–µ–º–æ-—Ä–µ–∂–∏–º")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
        setup_modern_style()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(root)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # === –û–°–ù–û–í–ù–ê–Ø –í–ö–õ–ê–î–ö–ê - –ö–õ–ò–ï–ù–¢–´ ===
        main_frame = tk.Frame(notebook, bg=ModernStyle.COLORS['background'])
        notebook.add(main_frame, text="üìã –ö–ª–∏–µ–Ω—Ç—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
        header = create_modern_header(main_frame)
        search_entry, date_from_entry, date_to_entry, search_frame = create_search_panel(main_frame)
        toolbar = create_toolbar(main_frame)
        
        # –°–û–ó–î–ê–ï–ú –¢–ê–ë–õ–ò–¶–£
        global tree
        tree, table_container = create_modern_table(main_frame)
        
        status_bar = create_status_bar(main_frame)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        root.search_entry = search_entry
        root.date_from_entry = date_from_entry
        root.date_to_entry = date_to_entry
        root.notebook = notebook
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        setup_initial_columns(tree)
        setup_tree_behavior(tree)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        setup_keyboard_shortcuts()
        setup_search_behavior()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        tree.bind("<Button-3>", show_context_menu)
        tree.bind("<Button-1>", toggle_check)
        
        print("DEBUG: Basic UI created, loading data...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        refresh_tree()
        
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω")
        
        # === –í–ö–õ–ê–î–ö–ê –ß–ê–¢–ê ===
        def initialize_chat():
            if not initialize_chat_system(notebook):
                create_chat_stub(notebook)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        root.after(1000, initialize_chat)
        
        # === –û–¢–õ–û–ñ–ï–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===
        
        def load_application_data():
            """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
                refresh_tree()
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                updater.auto_update()
                print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                    f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {e}")
        
        def initialize_notifications():
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
            try:
                if notification_system.initialize():
                    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    
                    unread_count = notification_system.get_unread_count()
                    if unread_count > 0:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {unread_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    else:
                        print("‚úÖ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
                else:
                    print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        def initialize_security_checks():
            """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
            try:
                check_expiring_ippcu()
                print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ü–ü–°–£ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ü–ü–°–£: {e}")
        
        def show_welcome_message():
            """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
            if AUTH_AVAILABLE and auth_manager.remember_me:
                show_status_message(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥: {auth_manager.get_user_display_name()}")
            elif AUTH_AVAILABLE:
                show_status_message(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {auth_manager.get_user_display_name()}!")
            else:
                show_status_message("–î–µ–º–æ-—Ä–µ–∂–∏–º: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º
        root.after(500, load_application_data)        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        root.after(1000, initialize_notifications)    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        root.after(1500, initialize_security_checks)  # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        root.after(2000, show_welcome_message)        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
        def on_closing():
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω –≤ —á–∞—Ç–µ
                if hasattr(root, 'chat_manager') and root.chat_manager:
                    root.chat_manager.set_user_online(False)
                    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings_manager.save_settings()
                print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if notification_system.is_initialized:
                    notification_system.clear_old_notifications()
                    print("‚úÖ –°—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            finally:
                root.destroy()
        
        root.protocol("WM_DELETE_WINDOW", on_closing)
        
        # === –°–¢–ê–¢–£–° –ó–ê–ü–£–°–ö–ê ===
        def show_startup_status():
            """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
            if hasattr(root, 'status_label'):
                root.status_label.config(text="–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
        
        root.after(3000, show_startup_status)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    main()
