import tkinter as tk
from tkinter import ttk
from datetime import datetime
from chat_manager import ChatManager

class ChatUI:
    def __init__(self, parent, chat_manager, style_colors, style_fonts):
        self.parent = parent
        self.chat_manager = chat_manager
        self.colors = style_colors
        self.fonts = style_fonts
        self.setup_ui()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        self.chat_frame = tk.Frame(self.parent, bg=self.colors['background'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        self.create_chat_header()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.create_chat_main_area()
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        self.create_input_panel()
        
        # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.create_quick_actions()
        
    def create_chat_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Ç–∞"""
        chat_header = tk.Frame(self.chat_frame, bg=self.colors['primary'], height=40)
        chat_header.pack(fill='x', padx=0, pady=0)
        
        self.chat_title = tk.Label(chat_header, text="üí¨ –ß–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", 
                                  bg=self.colors['primary'],
                                  fg='white',
                                  font=self.fonts['h3'])
        self.chat_title.pack(side='left', padx=10, pady=8)
        
        # –°—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        self.unread_label = tk.Label(chat_header, text="", 
                                    bg=self.colors['primary'],
                                    fg='yellow',
                                    font=self.fonts['small'])
        self.unread_label.pack(side='right', padx=10, pady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = ttk.Button(chat_header, text="üîÑ", 
                                style='Secondary.TButton',
                                command=self.refresh_chat,
                                width=3)
        refresh_btn.pack(side='right', padx=5)
    
    def create_chat_main_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_main = tk.Frame(self.chat_frame, bg=self.colors['background'])
        chat_main.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        message_frame = tk.Frame(chat_main, bg=self.colors['surface'])
        message_frame.pack(fill='both', expand=True, pady=(0, 5))
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        message_scroll = ttk.Scrollbar(message_frame)
        message_scroll.pack(side='right', fill='y')
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.messages_text = tk.Text(message_frame, 
                                   height=15,
                                   wrap='word',
                                   font=self.fonts['body'],
                                   bg=self.colors['surface'],
                                   fg=self.colors['text_primary'],
                                   yscrollcommand=message_scroll.set,
                                   state='disabled')
        self.messages_text.pack(side='left', fill='both', expand=True)
        message_scroll.config(command=self.messages_text.yview)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.setup_text_tags()
    
    def setup_text_tags(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.messages_text.tag_configure("header_text", 
                                       foreground=self.colors['primary'],
                                       font=(self.fonts['body'][0], self.fonts['body'][1], 'bold'))
        self.messages_text.tag_configure("message_text", 
                                       foreground=self.colors['text_primary'])
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.messages_text.tag_configure("header_system", 
                                       foreground=self.colors['secondary'],
                                       font=(self.fonts['body'][0], self.fonts['body'][1], 'bold'))
        self.messages_text.tag_configure("message_system", 
                                       foreground=self.colors['text_secondary'])
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        self.messages_text.tag_configure("header_alert", 
                                       foreground=self.colors['error'],
                                       font=(self.fonts['body'][0], self.fonts['body'][1], 'bold'))
        self.messages_text.tag_configure("message_alert", 
                                       foreground=self.colors['error'])
    
    def create_input_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        input_frame = tk.Frame(self.chat_frame, bg=self.colors['background'])
        input_frame.pack(fill='x', pady=5)
        
        self.input_entry = tk.Entry(input_frame, 
                                  font=self.fonts['body'],
                                  bg=self.colors['surface'])
        self.input_entry.pack(side='left', fill='x', expand=True, padx=(0, 5))
        self.input_entry.bind('<Return>', lambda e: self.send_message())
        
        self.send_btn = ttk.Button(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
                                 style='Primary.TButton',
                                 command=self.send_message)
        self.send_btn.pack(side='right')
    
    def create_quick_actions(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        quick_actions = tk.Frame(self.chat_frame, bg=self.colors['background'])
        quick_actions.pack(fill='x', pady=5)
        
        quick_buttons = [
            ("üìã –°–ø—Ä–∞–≤–∫–∞", "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º —Å–ø—Ä–∞–≤–∫–∏"),
            ("‚ùì –í–æ–ø—Ä–æ—Å", "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∫–ª–∏–µ–Ω—Ç—É"),
            ("üìÖ –í—Å—Ç—Ä–µ—á–∞", "–ù—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –ø–ª–∞–Ω —Ä–∞–±–æ—Ç—ã"),
        ]
        
        for text, template in quick_buttons:
            btn = ttk.Button(quick_actions, text=text,
                            style='Secondary.TButton',
                            command=lambda t=template: self.input_entry.insert(0, t))
            btn.pack(side='left', padx=(0, 5))
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        message = self.input_entry.get().strip()
        if message and self.chat_manager.send_message(message):
            self.input_entry.delete(0, tk.END)
            self.refresh_chat()
            self.update_unread_count()
    
    def refresh_chat(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.messages_text.config(state='normal')
        self.messages_text.delete(1.0, tk.END)
        
        messages = self.chat_manager.get_messages(limit=50)
        messages.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ —Å–Ω–∏–∑—É
        
        for msg_id, username, fullname, message, timestamp, msg_type in messages:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            try:
                msg_time = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S").strftime("%H:%M")
            except:
                msg_time = timestamp
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if msg_type == "system":
                prefix = f"‚ö° {msg_time} "
                header_tag = "header_system"
                message_tag = "message_system"
            elif msg_type == "alert":
                prefix = f"üö® {msg_time} "
                header_tag = "header_alert"
                message_tag = "message_alert"
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –¥—Ä—É–≥–æ–π
                if username == self.chat_manager.current_user:
                    prefix = f"üë§ –í—ã ({msg_time}): "
                else:
                    prefix = f"üë§ {fullname or username} ({msg_time}): "
                header_tag = "header_text"
                message_tag = "message_text"
            
            self.messages_text.insert(tk.END, prefix, header_tag)
            self.messages_text.insert(tk.END, f"{message}\n\n", message_tag)
        
        self.messages_text.config(state='disabled')
        self.messages_text.see(tk.END)  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        self.chat_manager.mark_as_read()
        self.update_unread_count()
    
    def update_unread_count(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
        unread_count = self.chat_manager.get_unread_count()
        
        if unread_count > 0:
            self.unread_label.config(text=f"–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {unread_count}")
        else:
            self.unread_label.config(text="")
    
    def flash_notification(self):
        """–ú–∏–≥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        original_color = self.chat_title.cget('background')
        for i in range(3):
            self.parent.after(i * 500, lambda: self.chat_title.config(bg='yellow'))
            self.parent.after(i * 500 + 250, lambda: self.chat_title.config(bg=original_color))
    
    def get_widget(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —á–∞—Ç–∞"""
        return self.chat_frame
    
    def set_current_user(self, username):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.chat_manager.current_user = username
        self.refresh_chat()